[{"content":"1.gopath,不使用mod管理时候外部包的引入通过环境变量gopath引入，包括自建包。\n2.使用mod管理后第三方依赖包会自动下载到第一个gopath的src目录下，此时对自建包则可以直接通过相对路径引入。 3.包内引用其他文件时是通过pack [包名]实现，因为引用优先找包内，之后才是其他包。一个文件夹其实就是一个包。\n","date":"2023-02-15T16:57:30Z","image":"http://localhost:1313/article/attend-a-funeral2/s_hu82c6dd7cde2a4430f7c72f453581f92a_131690_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"http://localhost:1313/article/attend-a-funeral2/","title":"go包管理"},{"content":"表结构如下：\n{% spoiler \u0026ldquo;点击显/隐内容\u0026rdquo; %}\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 create table Student(SId varchar(10),Sname varchar(10),Sage datetime,Ssex varchar(10)); insert into Student values(\u0026#39;01\u0026#39; , \u0026#39;赵雷\u0026#39; , \u0026#39;1990-01-01\u0026#39; , \u0026#39;男\u0026#39;); insert into Student values(\u0026#39;02\u0026#39; , \u0026#39;钱电\u0026#39; , \u0026#39;1990-12-21\u0026#39; , \u0026#39;男\u0026#39;); insert into Student values(\u0026#39;03\u0026#39; , \u0026#39;孙风\u0026#39; , \u0026#39;1990-12-20\u0026#39; , \u0026#39;男\u0026#39;); insert into Student values(\u0026#39;04\u0026#39; , \u0026#39;李云\u0026#39; , \u0026#39;1990-12-06\u0026#39; , \u0026#39;男\u0026#39;); insert into Student values(\u0026#39;05\u0026#39; , \u0026#39;周梅\u0026#39; , \u0026#39;1991-12-01\u0026#39; , \u0026#39;女\u0026#39;); insert into Student values(\u0026#39;06\u0026#39; , \u0026#39;吴兰\u0026#39; , \u0026#39;1992-01-01\u0026#39; , \u0026#39;女\u0026#39;); insert into Student values(\u0026#39;07\u0026#39; , \u0026#39;郑竹\u0026#39; , \u0026#39;1989-01-01\u0026#39; , \u0026#39;女\u0026#39;); insert into Student values(\u0026#39;09\u0026#39; , \u0026#39;张三\u0026#39; , \u0026#39;2017-12-20\u0026#39; , \u0026#39;女\u0026#39;); insert into Student values(\u0026#39;10\u0026#39; , \u0026#39;李四\u0026#39; , \u0026#39;2017-12-25\u0026#39; , \u0026#39;女\u0026#39;); insert into Student values(\u0026#39;11\u0026#39; , \u0026#39;李四\u0026#39; , \u0026#39;2012-06-06\u0026#39; , \u0026#39;女\u0026#39;); insert into Student values(\u0026#39;12\u0026#39; , \u0026#39;赵六\u0026#39; , \u0026#39;2013-06-13\u0026#39; , \u0026#39;女\u0026#39;); insert into Student values(\u0026#39;13\u0026#39; , \u0026#39;孙七\u0026#39; , \u0026#39;2014-06-01\u0026#39; , \u0026#39;女\u0026#39;); create table Course(CId varchar(10),Cname nvarchar(10),TId varchar(10)); insert into Course values(\u0026#39;01\u0026#39; , \u0026#39;语文\u0026#39; , \u0026#39;02\u0026#39;); insert into Course values(\u0026#39;02\u0026#39; , \u0026#39;数学\u0026#39; , \u0026#39;01\u0026#39;); insert into Course values(\u0026#39;03\u0026#39; , \u0026#39;英语\u0026#39; , \u0026#39;03\u0026#39;); create table Teacher(TId varchar(10),Tname varchar(10)); insert into Teacher values(\u0026#39;01\u0026#39; , \u0026#39;张三\u0026#39;); insert into Teacher values(\u0026#39;02\u0026#39; , \u0026#39;李四\u0026#39;); insert into Teacher values(\u0026#39;03\u0026#39; , \u0026#39;王五\u0026#39;); select week(CURDATE())+1; create table SC(SId varchar(10),CId varchar(10),score decimal(18,1)); insert into SC values(\u0026#39;01\u0026#39; , \u0026#39;01\u0026#39; , 80); insert into SC values(\u0026#39;01\u0026#39; , \u0026#39;02\u0026#39; , 90); insert into SC values(\u0026#39;01\u0026#39; , \u0026#39;03\u0026#39; , 99); insert into SC values(\u0026#39;02\u0026#39; , \u0026#39;01\u0026#39; , 70); insert into SC values(\u0026#39;02\u0026#39; , \u0026#39;02\u0026#39; , 60); insert into SC values(\u0026#39;02\u0026#39; , \u0026#39;03\u0026#39; , 80); insert into SC values(\u0026#39;03\u0026#39; , \u0026#39;01\u0026#39; , 80); insert into SC values(\u0026#39;03\u0026#39; , \u0026#39;02\u0026#39; , 80); insert into SC values(\u0026#39;03\u0026#39; , \u0026#39;03\u0026#39; , 80); insert into SC values(\u0026#39;04\u0026#39; , \u0026#39;01\u0026#39; , 50); insert into SC values(\u0026#39;04\u0026#39; , \u0026#39;02\u0026#39; , 30); insert into SC values(\u0026#39;04\u0026#39; , \u0026#39;03\u0026#39; , 20); insert into SC values(\u0026#39;05\u0026#39; , \u0026#39;01\u0026#39; , 76); insert into SC values(\u0026#39;05\u0026#39; , \u0026#39;02\u0026#39; , 87); insert into SC values(\u0026#39;06\u0026#39; , \u0026#39;01\u0026#39; , 31); insert into SC values(\u0026#39;06\u0026#39; , \u0026#39;03\u0026#39; , 34); insert into SC values(\u0026#39;07\u0026#39; , \u0026#39;02\u0026#39; , 89); insert into SC values(\u0026#39;07\u0026#39; , \u0026#39;03\u0026#39; , 98); {% endspoiler %}\n1.sql语句的执行顺序为\n当一个查询语句同时出现了where,group by,having,order by的时候，执行顺序和编写顺序是： 1.执行where xx对全表数据做筛选，返回第1个结果集。 2.针对第1个结果集使用group by分组，返回第2个结果集。 3.针对第2个结果集中的数据执行select xx返回第3个结果集。 4.针对第3个结集执行having xx进行筛选，返回第4个结果集。 5.针对第4个结果集排序,获得最终结果。\n2.SUM(),MIN(),Max()这类的，我们称作是聚合函数。那么我们不能在where子句中使用这些函数，为什么呢？\n聚集函数也叫列函数，它们都是基于整列数据进行计算的，而where子句则是对数据行进行过滤的(这里过滤是在一个记录里边过滤的,基于\u0026quot;行\u0026quot;)，在筛选过程中依赖“基于已经筛选完毕的数据得出的计算结果”是一种悖论，这是行不通的。更简单地说，因为聚集函数要对全列数据时行计算，因而使用它的前提是：结果集已经确定！\n而where子句还处于“确定”结果集的过程中，因而不能使用聚集函数。\n1.查询\u0026quot; 01 \u0026ldquo;课程比\u0026rdquo; 02 \u0026ldquo;课程成绩高的学生的信息及课程分数\n1 2 3 4 5 select student.*,r.* from Student, ( select t1.sid,t1.score as c1 ,t2.score as c2 from (select SId, score from sc where sc.CId = \u0026#39;01\u0026#39;) as t1, (select SId ,score from sc where sc.CId = \u0026#39;02\u0026#39;) as t2 where t1.score \u0026gt; t2.score and t1.sid = t2.sid) as r where Student.SId = r.SId ; 2.查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩\n1 2 3 select student.sid, sname ,r.avger from student join ( select sid ,avg(score) as avger from sc group by sc.Sid having avg(score)\u0026gt; 60 )as r on student.sid = r.sid; 3.查询在 SC 表存在成绩的学生信息\n1 2 3 select DISTINCT student.*#DISTINCT去重 from student,sc where student.SId=sc.SId 4.查询所有同学的学生编号、学生姓名、选课总数、所有课程的成绩总和\n1 2 3 select student.sid ,student.sname ,r.s1,r.s2 from student join (select sid,count(sid) as s1 ,sum(score)as s2 from sc group by sc.sid ) as r on student.sid = r.sid ; 5.查询「李」姓老师的数量\n1 select count(tid) from teacher where tname like \u0026#34;李%\u0026#34;; 6.查询学过「张三」老师授课的同学的信息\n1 2 3 select student.* ,s.CId from student, (select sc.sid ,sc.cid from sc where sc.CId = \u0026#39;02\u0026#39; group by sc.SId)as s where student.sid = s.sid; 7.查询有成绩学生且选课总数大于等于2的同学的信息\n1 2 3 SELECT STUDENT.* FROM STUDENT, (select ID.SID FROM (SELECT SC.SID, count(score) as total from sc group by sc.sid )AS ID , (SELECT count(course.cid) as tcid from course) as t1 WHERE ID.TOTAL \u0026lt; T1.TCID)AS D WHERE STUDENT.SID = D.SID; 8.查询至少有一门课与学号为\u0026rdquo; 01 \u0026ldquo;的同学所学相同的同学的信息\n1 2 3 4 5 6 7 8 select * from student where student.sid in ( select sc.sid from sc where sc.cid in( select sc.cid from sc where sc.sid = \u0026#39;01\u0026#39; ) ); 9.查询没学过\u0026quot;张三\u0026quot;老师讲授的任一门课程的学生姓名\n1 2 3 4 5 select student.sname from student where sid not in( select sid from sc , (select cid from course , (select tid from teacher where tname = \u0026#39;张三\u0026#39;) as id where course.TId = id.tid) as cid1 where sc.cid = cid1.cid); 10.查询学生的总成绩，并进行排名\n1 2 3 select student.sid,student.sname,r.s from student , (select sid,sum(score) as s from sc group by sid) as r where student.sid = r.sid order by r.s desc; 11.查询各科目优秀人数，分数在85分以上的人数为优秀\n1 2 3 4 5 select r.cid, r.cname, sum(case r.score when r.score \u0026gt;= 85 and r.score \u0026lt;= 100 then 1 else 0 end )as \u0026#34;优秀\u0026#34; from (select * from sc join course on sc.cid = course.cid) as r group by r.cid ; 12.查询语文成绩前三名\n1 2 3 select student.Sname, sc.sid ,sc.score from student ,sc, (select cid from co where cname = \u0026#39;语文\u0026#39;) as b where (sc.cid = b.cid and student.sid = sc.sid) order by score desc limit 3; 13.查询各科成绩最高分、最低分和平均分：\n1 select max(score)as \u0026#39;最高分\u0026#39;,min(score) as \u0026#39;最低分\u0026#39;,avg(score) as \u0026#39;平均分\u0026#39; from sc group by sc.cid; 14.查询每门课程被选修的学生数\n1 select sc.cid,sum(sc.sid) from sc group by sc.CId ; 15.查询男生数、女生数量\n1 select ssex ,count(sid) from student group by ssex; 16.查询名字含有风的学生的信息\n1 select * from student where sname like \u0026#39;%风%\u0026#39;; 17.查询同名学生数量\n1 2 select r.sname,r.num from (select student.*,count(sname) as num from student group by sname) as r where r.num \u0026gt;1; 17.嵌套查询列出同名的全部学生的信息\n1 2 3 4 5 6 select * from student where sname in ( select sname from student group by sname having count(*)\u0026gt;1 ); 18.查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩\n1 2 3 select student .*,r.avger from (select sid, avg(score)as avger from sc group by sid)as r,student where student.sid = r.sid and r.avger \u0026gt;= 85; 1 2 3 4 select student.sid, student.sname, AVG(sc.score) as aver from student, sc where student.sid = sc.sid group by sc.sid having aver \u0026gt; 85; 19.查询课程编号为 01 且课程成绩在 80 分及以上的学生的学号和姓名\n1 select student.sid,student.sname,r.* from (select sid ,score ,sc.cid from sc where sc.cid = \u0026#39;01\u0026#39; and sc.score \u0026gt;= 80)as r,student where student.sid = r.sid; 1 2 3 4 select student.sid,student.sname ,sc.score from student,sc where cid=\u0026#34;01\u0026#34; and score\u0026gt;=80 20.查询同名学生名单，并统计同名人数\n1 2 3 4 select b.*,c.num from (select student.* from student join student as a on student.sid != a.sid and student.sname = a.sname)as b join (select student.sname,count(student.sname) as num from student group by student.sname) as c on b.sname = c.sname; 21.查询至少有一门课与学号为\u0026rdquo; 01 \u0026ldquo;的同学所学相同的同学的信息\n1 2 3 4 5 6 7 8 9 10 11 12 select student.* from (select sc.sid from ((select sc.sid, sc.cid from sc where sc.SId = \u0026#39;01\u0026#39;)as r join sc on sc.sid != r.sid and sc.CId in (r.cid)))as a ,student where student.sid = a.sid group by a.sid ; select * from student where student.sid in ( select sc.sid from sc where sc.cid in( select sc.cid from sc where sc.sid = \u0026#39;01\u0026#39; ) ); 22.查询每门功成绩最好的前两名\n1 2 3 4 select * from sc as t1 where (select count(*) from sc as t2 where t1.CId=t2.CId and t2.score \u0026gt;t1.score)\u0026lt;2 ORDER BY t1.CId 23.查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩\n1 select sc.sid,sc.cid,sc.score from sc ,sc as t where sc.sid = t.sid and t.CId != sc.CId and sc.score = t.score group by sc.cid; 24.成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩\n1 2 3 select student.*,r.cid,r.score from student, (select * from sc where sc.CId = (select co. cid from co where co.TId = (select teacher.tid from teacher where teacher.Tname = \u0026#39;张三\u0026#39;)) order by sc.score desc limit 1 )as r where student.sid = r.sid; 25.查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩\n1 2 select t1.* from sc as t1,sc as t2 where t1.SId=t2.SId and t1.CId!=t2.CId and t1.score =t2.score group by t1.cid ; ","date":"2021-11-03T21:13:38Z","permalink":"http://localhost:1313/article/attend-a-funeral3/","title":"sql 50题练习"}]